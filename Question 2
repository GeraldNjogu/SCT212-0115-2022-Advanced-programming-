import java.util.Calendar;

public class Main {
    public static void main(String[] args) throws InsufficientFundsException {
        // Step 1: Create a BankAccount object
        BankAccount account = new BankAccount("123456", 1000.00);

        // Step 2: Create a DepositTransaction and apply it to the BankAccount
        BaseTransaction deposit = new DepositTransaction(200.00, Calendar.getInstance(), "TXN123");
        deposit.apply(account);  // Deposit $200
        deposit.printTransactionDetails();  // Print details of the deposit

        // Step 3: Create a WithdrawalTransaction and apply it to the BankAccount
        WithdrawalTransaction withdrawal = new WithdrawalTransaction(300.00, Calendar.getInstance(), "TXN124");

        try {
            withdrawal.apply(account);  // Attempt to withdraw $300
        } catch (InsufficientFundsException e) {
            System.out.println("Error: " + e.getMessage());
        }
        withdrawal.printTransactionDetails();  // Print details of the withdrawal

        // Step 4: Attempt to reverse the withdrawal transaction
        boolean reversed = withdrawal.reverse(account);  // Attempt to reverse the withdrawal
        System.out.println("Reversal successful? " + reversed);

        // Step 5: Attempt to reverse the withdrawal again to test that reversal can only be done once
        reversed = withdrawal.reverse(account);
        System.out.println("Reversal successful? " + reversed);

        // Step 6: Attempt a large withdrawal to trigger InsufficientFundsException
        WithdrawalTransaction largeWithdrawal = new WithdrawalTransaction(1500.00, Calendar.getInstance(), "TXN125");

        try {
            largeWithdrawal.apply(account);  // This should trigger InsufficientFundsException
        } catch (InsufficientFundsException e) {
            System.out.println("Error: " + e.getMessage());
        }
        largeWithdrawal.printTransactionDetails();

        // Step 7: Print the Final Account Balance
        System.out.println("Final Account Balance: " + account.getBalance());
    }
}


WithdrawalTransaction.java
updated WithdrawalTransaction class with the new reverse() method:

import java.util.Calendar;

public class WithdrawalTransaction extends BaseTransaction {
    private boolean reversed;  // Tracks if the transaction has already been reversed

    public WithdrawalTransaction(double amount, Calendar date, String transactionID) {
        super(amount, date, transactionID);
        this.reversed = false;  // Initialize reversed flag as false
    }

    @Override
    public void apply(BankAccount ba) throws InsufficientFundsException {
        if (ba.getBalance() < amount) {
            throw new InsufficientFundsException("Insufficient funds for withdrawal.");
        }
        ba.withdraw(amount);
        this.reversed = false;  // Reset reversed flag each time apply is called
    }

    // Method to reverse the withdrawal
    public boolean reverse(BankAccount ba) {
        if (!reversed) {
            ba.deposit(amount);  // Restore the withdrawn amount to the account balance
            reversed = true;     // Mark this transaction as reversed
            System.out.println("Transaction reversed successfully.");
            return true;
        } else {
            System.out.println("Transaction has already been reversed.");
            return false;
        }
    }
}
